(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'index'"
p3
sS'layer'
p4
S'K:\\web2py_win\\web2py\\applications\\app1\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\ndef home():\n    response.flash = "welcome to incredible varanasi"\n    #mail.send(to=[\'mehuljain811@gmail.com\'],\n          #subject=\'hello\',\n          # If reply_to is omitted, then mail.settings.sender is used\n          #reply_to=\'mehuljain811@gmail.com\',\n          #message=\'hi there\')\n\n    response.files.append(URL(\'static\', \'css/background.css\'))\n    response.files.append(URL(\'static\', \'css/grid.css\'))\n    return locals()\n\n@auth.requires_login()\ndef bank():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    i =0 \n    \n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,db.place_distance.distance,orderby = ~db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="bank").select(db.places.Place_ID,db.places.place_name,db.places.rating,distinct=True)\n            #x.distance = Field.Virtual(\'distance\')\n           # x.distance=r.distance\n            #ui = r.distance\n            #x=x+r.distance\n            t3.append(x)\n        #for t3s in t3:\n         #   for enters in enter_rows:\n          #      for xs in t3s:\n         #           if xs.Place_ID==enters.place1:\n          #              xs.distance = enters.distance\n           #             ma[i] = [xs.Place_ID,xs.place_name,enters.distance]\n            #            i = i+1\n               # x = list(t3)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        bank_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="bank" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef bank_place():\n    response.files.append(URL(\'static\', \'css/background_bank.css\'))\n    response.files.append(URL(\'static\', \'css/box_bank.css\'))\n    response.files.append(URL(\'static\', \'css/box_bank_contact.css\'))\n    postals = db(db.bank.ID_BK==request.args[0]).select()\n    phones = db(db.bank_2.ID_BK_2==request.args[0]).select(db.bank_2.Phone_BK)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.bank.ID_BK==request.args[0]).update(Rating_BK=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n@auth.requires_login()\ndef entertainment():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="entertainment").select(distinct=True)\n            t3.append(x)\n\n        #y = db(x).select(distinct=True)\n        #rows =  db(db.places).select(join=enter_rows(db.places.Place_ID==enter_rows))\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        enter_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="entertainment" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef enter_place():\n    response.files.append(URL(\'static\', \'css/background_entertainment.css\'))\n    response.files.append(URL(\'static\', \'css/box_entertainment.css\'))\n    postals = db(db.entertainment_hub.ID_EH==request.args[0]).select()\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.entertainment_hub.ID_EH==request.args[0]).update(Rating_EH=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n@auth.requires_login()\ndef fuel_agency():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="fuel agency").select(distinct=True)\n            t3.append(x)\n\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        fag_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="fuel agency" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef fuelagency_place():\n    response.files.append(URL(\'static\', \'css/background_fuelagency.css\'))\n    response.files.append(URL(\'static\', \'css/box_fuel.css\'))\n    postals = db(db.fuel_agency.ID_FA==request.args[0]).select()\n    x = db.fuel_agency(db.fuel_agency.ID_FA==request.args[0])\n    affils = db(db.fuel_company.ID_FC==x.ID_FC_R).select()\n    phones = db(db.fuel_agency_2.ID_FA_2==request.args[0]).select(db.fuel_agency_2.Phone_FA,distinct=True)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.fuel_agency.ID_FA==request.args[0]).update(Rating_FA=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n\n@auth.requires_login()\ndef fuel_company():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    if check_form.accepted:\n        t=form.components[0]\n        fc_rows = db(db.place_distance.place2==t).select(db.place_distance.place1,db.place_distance.distance,orderby = db.place_distance.distance)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        fc_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="fuel company" order by rating desc\')\n    return locals()\n\n\n@auth.requires_login()\ndef fuelcompany_place():\n    response.files.append(URL(\'static\', \'css/background_fuelcompany.css\'))\n    response.files.append(URL(\'static\', \'css/box_fuel.css\'))\n    postals = db(db.fuel_company.ID_FC==request.args[0]).select()\n    \n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    return locals()\n\n@auth.requires_login()\ndef handloom():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="handloom").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        hand_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="handloom" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef handloom_place():\n    response.files.append(URL(\'static\', \'css/background_handloom.css\'))\n    response.files.append(URL(\'static\', \'css/box_handloom.css\'))\n    postals = db(db.local_handlooms.ID_LH==request.args[0]).select()\n    phones = db(db.local_handlooms_2.ID_LH_2==request.args[0]).select(db.local_handlooms_2.Phone_LH)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.local_handlooms.ID_LH==request.args[0]).update(Rating_LH=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n\n\n@auth.requires_login()\ndef heritage():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="heritage").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        hrei_rows = db.executesql(\'select Place_Name as place1,rating,Place_ID from places where Place_Type="heritage" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef heri_place():\n    response.files.append(URL(\'static\', \'css/background_heritage.css\'))\n    response.files.append(URL(\'static\', \'css/box_heritage.css\'))\n    #postal = db.heritage_areas(request.args)\n    #posts = db.executesql(\'select * from heritage_areas where ID_HA="ha1"\')\n    postals = db(db.heritage_areas.ID_HA==request.args[0]).select()\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.heritage_areas.ID_HA==request.args[0]).update(Rating_HA=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n\n\n\n@auth.requires_login()\ndef hotel():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="hotel").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        hotel_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="hotel" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef hotel_place():\n    response.files.append(URL(\'static\', \'css/background_hotel.css\'))\n    response.files.append(URL(\'static\', \'css/box_entertainment.css\'))\n    postals = db(db.hotels.ID_HT==request.args[0]).select()\n    phones = db(db.hotels_2.ID_HT_2==request.args[0]).select(db.hotels_2.Phone_HT)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.hotels.ID_HT==request.args[0]).update(Rating_HT=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n@auth.requires_login()\ndef recreation():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="recreation").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        rec_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="recreation" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef recreat_place():\n    response.files.append(URL(\'static\', \'css/background_recreation.css\'))\n    response.files.append(URL(\'static\', \'css/box_entertainment.css\'))\n    postals = db(db.recreation_hub.ID_RH==request.args[0]).select()\n    \n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.recreation_hub.ID_RH==request.args[0]).update(Rating_RH=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n\n\n@auth.requires_login()\ndef restaurant():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="restaurant").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        restaur_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="restaurant" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef restaur_place():\n    response.files.append(URL(\'static\', \'css/background_restaurant.css\'))\n    response.files.append(URL(\'static\', \'css/box_fuel.css\'))\n    postals = db(db.restaurant.ID_RS==request.args[0]).select()\n    phones = db(db.restaurant_2.ID_RS_2==request.args[0]).select(db.restaurant_2.Phone_RS)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.restaurant.ID_RS==request.args[0]).update(Rating_RS=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n@auth.requires_login()\ndef spiritual():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="spiritual").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        spirit_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="spiritual" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef spirit_place():\n    response.files.append(URL(\'static\', \'css/background_spiritual.css\'))\n    response.files.append(URL(\'static\', \'css/box_spiritual.css\'))\n    postals = db(db.spiritual_hub.ID_SH==request.args[0]).select()\n    \n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.spiritual_hub.ID_SH==request.args[0]).update(Rating_SH=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n@auth.requires_login()\ndef taxi_service():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="taxi service").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        taxi_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="taxi service" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef taxi_place():\n    response.files.append(URL(\'static\', \'css/background_taxiservice.css\'))\n    response.files.append(URL(\'static\', \'css/box_taxiservice.css\'))\n    postals = db(db.taxi_service.ID_TS==request.args[0]).select()\n    phones = db(db.taxi_service_2.ID_TS_2==request.args[0]).select(db.taxi_service_2.Phone_TS,distinct=True)\n    carprices = db(db.taxi_service_2.ID_TS_2==request.args[0]).select(db.taxi_service_2.Car_Price_TS,distinct=True)\n    cartypes = db(db.taxi_service_2.ID_TS_2==request.args[0]).select(db.taxi_service_2.Car_Types_TS,distinct=True)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.taxi_service.ID_TS==request.args[0]).update(Rating_TS=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n@auth.requires_login()\ndef travel_agency():\n    #hrei_rows = db(db.places.place_type=="heritage").select(orderby = ~db.places.rating)\n    form = SQLFORM.factory(Field(\'Current_Location\', requires=IS_IN_DB(db, \'places.place_name\', \'%(place_name)s\')))\n    check_form = form.process()\n    t=1\n    t1=[]\n    t3=[]\n    if check_form.accepted:\n        t=form.vars.Current_Location\n        t1=db(db.places.place_name==t).select(db.places.Place_ID)\n        for t2 in t1:\n            enter_rows = db(db.place_distance.place2==t2.Place_ID).select(db.place_distance.place1,orderby = db.place_distance.distance)\n        for r in enter_rows:\n            x = db(db.places.Place_ID==r.place1 and db.places.place_type=="travel agency").select(distinct=True)\n            t3.append(x)\n        #hrei_near_rows = db.executesql(\'select place1,distance from place_distance where place2=selected_place order by distance\')\n    else:\n        travel_rows = db.executesql(\'select place_name,rating,Place_ID from places where place_type="travel agency" order by rating desc\')\n    return locals()\n\n@auth.requires_login()\ndef travel_place():\n    response.files.append(URL(\'static\', \'css/background_travelagency.css\'))\n    response.files.append(URL(\'static\', \'css/box_fuel.css\'))\n    postals = db(db.travel_agency.ID_TA==request.args[0]).select()\n    phones = db(db.Travel_Agency_2.ID_TA_2==request.args[0]).select(db.Travel_Agency_2.Phone_TA,distinct = True)\n    tour_package = db(db.Travel_Agency_2.ID_TA_2==request.args[0]).select(db.Travel_Agency_2.Tour_Package_TA,distinct = True)\n    db.visit_places.Place_ID.default = request.args[0]\n    db.visit_places.Place_ID.readable = False\n    db.visit_places.Place_ID.writable = False\n\n    db.visit_places.RU_ID_Place.readable = False\n    db.visit_places.RU_ID_Place.writable = False\n\n    form = SQLFORM(db.visit_places).process()\n    comments = db(db.visit_places.Place_ID==request.args[0]).select()\n\n    db.visit_places.RU_ID_Place.default = db.visit_places.created_by\n    if form.accepted:\n        if len(comments)!=0:\n            sume=0\n            for commente in comments:\n                sume+= (commente.User_Rating_Place)\n                db(db.travel_agency.ID_TA==request.args[0]).update(Rating_TA=sume/len(comments))\n                db(db.places.Place_ID==request.args[0]).update(rating=sume/len(comments))\n    return locals()\n\n\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #rows = db(db.blog_post).select()\n    #response.flash = T("Welcome to Incredible Varanasi")\n    redirect(URL(\'home\'))\n    return locals()\n#@auth.requires_login()\n\ndef comment():\n    x = request.args[0]\n    y = request.args[1]\n    postals = db(db.visit_reply.post_id==x).select()\n    db.visit_reply.post_id.default = x\n    db.visit_reply.post_id.readable = False\n    db.visit_reply.post_id.writable = False\n    form = SQLFORM(db.visit_reply).process()\n\n    if form.accepted:\n        postals = db(db.visit_reply.post_id==request.args[0]).select()\n    return locals()\n    \ndef create():\n    \n    return locals()\ndef show():\n    return "Team MADS"\n\ndef user():\n    rpx = \'\'\n    registerurl=URL(\'default\',\'user\',args=\'register\',vars=dict(_next=\'/init/default/somepage\'))\n    if request.vars.token:\n        auth.settings.login_form = rpxform\n        return dict(form=auth())\n    if \'login\' in request.args:\n        rpx = rpxform.login_form()\n        html = DIV(H1(\'Login\'),\n               rpx,BR(),BR(),\n               H1(A(\'Click here to register\',\n                       _href=registerurl),BR(),\n                       \'Or sign-in using your email and password\'),\n               auth(),\n              )\n    else:\n        html = auth()\n\n    return dict(form=html)\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef edit_post():\n    id = request.args(0,cast=int)\n    index = request.args(1,cast=int)\n    message = request.args(2)\n    a = int.index\n    form = SQLFORM(db.visit_reply,id,message).process(next=\'comment/a/message\')\n    return locals()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login()\ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(comment)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 224, in restricted\n  File "K:\\web2py_win\\web2py\\applications\\app1\\controllers/default.py", line 722, in <module>\n  File "gluon/globals.py", line 392, in <lambda>\n  File "K:\\web2py_win\\web2py\\applications\\app1\\controllers/default.py", line 631, in comment\n    postals = db(db.visit_reply.post_id==x).select()\n  File "gluon/dal.py", line 10749, in select\n  File "gluon/dal.py", line 2472, in select\n  File "gluon/dal.py", line 1868, in select\n  File "gluon/dal.py", line 1767, in _select\n  File "gluon/dal.py", line 1544, in expand\n  File "gluon/dal.py", line 1440, in EQ\n  File "gluon/dal.py", line 1555, in expand\n  File "gluon/dal.py", line 2005, in represent\nValueError: invalid literal for long() with base 10: \'index\'\n'
p11
s.